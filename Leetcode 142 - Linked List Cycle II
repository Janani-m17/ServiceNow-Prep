// Leetcode 142 - Linked List Cycle II

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        // Find the starting node of cycle
        
        ListNode *slow = head, *fast = head;

        while(fast != nullptr && fast->next != nullptr){
            slow = slow->next;
            fast = fast->next->next;

            if(slow == fast){                    // cycle exists
                slow = head;                    // reset slow to head
                while(slow != fast){
                    slow = slow->next;        // now move both slow and fast 
                    fast = fast->next;       // if they met that is starting node
                }
                return slow;
            }
        }

        return nullptr;
    }
};
